- title: "Подсчет количества и суммы"
  description_md: |
    # Подсчет количества и суммы
    
    В этом упражнении вы научитесь использовать агрегатные функции COUNT() и SUM() для анализа данных.
    
    ## База данных
    
    Вы работаете с таблицей `orders`, которая содержит информацию о заказах:
    
    | id | customer_id | order_date | total_amount | status |
    |----|-------------|------------|--------------|--------|
    | 1  | 1           | 2023-01-15 | 47000 | Доставлен |
    | 2  | 2           | 2023-01-16 | 25000 | В пути |
    | 3  | 3           | 2023-01-17 | 7000 | Отменён |
    | 4  | 1           | 2023-01-18 | 1000 | Доставлен |
    | 5  | 4           | 2023-01-18 | 5000 | Отменён |
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт:
    1. Общее количество заказов
    2. Общую сумму всех заказов
    3. Среднюю сумму заказа
    
    Результат должен иметь следующие столбцы: `order_count`, `total_sum`, `average_order`.
  init_sql: |
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён');
  expected_sql: |
    SELECT 
      COUNT(*) AS order_count, 
      SUM(total_amount) AS total_sum, 
      AVG(total_amount) AS average_order
    FROM orders;
  order: 1
  lesson_id: 5

- title: "Группировка данных с GROUP BY"
  description_md: |
    # Группировка данных с GROUP BY
    
    В этом упражнении вы научитесь использовать оператор GROUP BY для группировки данных по определенному критерию.
    
    ## База данных
    
    Вы работаете с таблицей `products`, которая содержит информацию о товарах:
    
    | id | name | description | price | category |
    |----|------|-------------|-------|----------|
    | 1  | Ноутбук ASUS | Ноутбук для работы и развлечений | 45000 | Электроника |
    | 2  | Смартфон Samsung | Смартфон с хорошей камерой | 25000 | Электроника |
    | 3  | Футболка Nike | Спортивная футболка | 2000 | Одежда |
    | 4  | Кроссовки Adidas | Спортивная обувь | 5000 | Обувь |
    | 5  | Книга "SQL для начинающих" | Учебник по SQL | 1000 | Книги |
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт для каждой категории товаров:
    1. Название категории
    2. Количество товаров в категории
    3. Суммарную стоимость всех товаров в категории
    4. Среднюю цену товара в категории
    
    Результат должен быть отсортирован по убыванию количества товаров в категории.
  init_sql: |
    -- Создаём таблицу products
    CREATE TABLE products (
      id INTEGER PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT NOT NULL,
      price INTEGER NOT NULL,
      category TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO products (id, name, description, price, category) VALUES
      (1, 'Ноутбук ASUS', 'Ноутбук для работы и развлечений', 45000, 'Электроника'),
      (2, 'Смартфон Samsung', 'Смартфон с хорошей камерой', 25000, 'Электроника'),
      (3, 'Футболка Nike', 'Спортивная футболка', 2000, 'Одежда'),
      (4, 'Кроссовки Adidas', 'Спортивная обувь', 5000, 'Обувь'),
      (5, 'Книга "SQL для начинающих"', 'Учебник по SQL', 1000, 'Книги');
  expected_sql: |
    SELECT 
      category,
      COUNT(*) AS product_count,
      SUM(price) AS total_price,
      AVG(price) AS average_price
    FROM products
    GROUP BY category
    ORDER BY product_count DESC;
  order: 2
  lesson_id: 5

- title: "Фильтрация групп с HAVING"
  description_md: |
    # Фильтрация групп с HAVING
    
    В этом упражнении вы научитесь использовать оператор HAVING для фильтрации результатов группировки.
    
    ## База данных
    
    Вы работаете с таблицей `orders`, которая содержит информацию о заказах:
    
    | id | customer_id | order_date | total_amount | status |
    |----|-------------|------------|--------------|--------|
    | 1  | 1           | 2023-01-15 | 47000 | Доставлен |
    | 2  | 2           | 2023-01-16 | 25000 | В пути |
    | 3  | 3           | 2023-01-17 | 7000 | Отменён |
    | 4  | 1           | 2023-01-18 | 1000 | Доставлен |
    | 5  | 4           | 2023-01-18 | 5000 | Отменён |
    | 6  | 2           | 2023-01-19 | 12000 | Доставлен |
    | 7  | 3           | 2023-01-20 | 8000 | В пути |
    | 8  | 5           | 2023-01-21 | 30000 | Доставлен |
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт идентификаторы клиентов (customer_id), сделавших более одного заказа, 
    и общую сумму их заказов. В результате должны быть только те клиенты, у которых общая сумма заказов 
    превышает 20000.
    
    Результат должен быть отсортирован по убыванию общей суммы заказов.
  init_sql: |
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён'),
      (6, 2, '2023-01-19', 12000, 'Доставлен'),
      (7, 3, '2023-01-20', 8000, 'В пути'),
      (8, 5, '2023-01-21', 30000, 'Доставлен');
  expected_sql: |
    SELECT 
      customer_id,
      COUNT(*) AS order_count,
      SUM(total_amount) AS total_spent
    FROM orders
    GROUP BY customer_id
    HAVING COUNT(*) > 1 AND SUM(total_amount) > 20000
    ORDER BY total_spent DESC;
  order: 3
  lesson_id: 5