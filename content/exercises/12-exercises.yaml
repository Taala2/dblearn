- title: "Создание простого представления"
  description_md: |
    # Создание простого представления
    
    В этом упражнении вы научитесь создавать простое представление (VIEW) на основе одной таблицы.
    
    ## База данных
    
    У вас есть таблица `products` с информацией о товарах:
    
    | id | name | description | price | category_id | supplier_id | active |
    |----|------|-------------|-------|-------------|-------------|--------|
    | 1  | Ноутбук ASUS | Ноутбук для работы | 45000 | 1 | 1 | true |
    | 2  | Смартфон Samsung | Смартфон с хорошей камерой | 25000 | 1 | 2 | true |
    | 3  | Футболка Nike | Спортивная футболка | 2000 | 2 | 3 | true |
    | 4  | Кроссовки Adidas | Спортивная обувь | 5000 | 3 | 3 | true |
    | 5  | Книга "SQL для начинающих" | Учебник по SQL | 1000 | 4 | 4 | false |
    | 6  | Планшет iPad | Планшет для работы и развлечений | 35000 | 1 | 5 | true |
    
    ## Задание
    
    Создайте представление `active_electronics`, которое содержит только активные товары из категории с ID=1 (электроника).
    
    Представление должно включать следующие столбцы:
    - id
    - name
    - price
    - supplier_id
    
    Результат должен быть отсортирован по убыванию цены.
  init_sql: |
    -- Создаём таблицу products
    CREATE TABLE products (
      id INTEGER PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT,
      price INTEGER NOT NULL,
      category_id INTEGER NOT NULL,
      supplier_id INTEGER NOT NULL,
      active BOOLEAN NOT NULL
    );
    
    -- Вставляем тестовые данные
    INSERT INTO products (id, name, description, price, category_id, supplier_id, active) VALUES
      (1, 'Ноутбук ASUS', 'Ноутбук для работы', 45000, 1, 1, true),
      (2, 'Смартфон Samsung', 'Смартфон с хорошей камерой', 25000, 1, 2, true),
      (3, 'Футболка Nike', 'Спортивная футболка', 2000, 2, 3, true),
      (4, 'Кроссовки Adidas', 'Спортивная обувь', 5000, 3, 3, true),
      (5, 'Книга "SQL для начинающих"', 'Учебник по SQL', 1000, 4, 4, false),
      (6, 'Планшет iPad', 'Планшет для работы и развлечений', 35000, 1, 5, true);
  expected_sql: |
    CREATE VIEW active_electronics AS
    SELECT id, name, price, supplier_id
    FROM products
    WHERE category_id = 1 AND active = true
    ORDER BY price DESC;
  order: 1
  lesson_id: 12

- title: "Создание представления с JOIN"
  description_md: |
    # Создание представления с JOIN
    
    В этом упражнении вы научитесь создавать представление на основе нескольких таблиц с использованием JOIN.
    
    ## База данных
    
    У вас есть таблицы `customers` и `orders`:
    
    Таблица `customers`:
    
    | id | first_name | last_name | email | city | country |
    |----|------------|-----------|-------|------|---------|
    | 1  | Иван       | Иванов    | ivan@example.com | Москва | Россия |
    | 2  | Анна       | Петрова   | anna@example.com | Санкт-Петербург | Россия |
    | 3  | Джон       | Смит      | john@example.com | Нью-Йорк | США |
    | 4  | Мария      | Сидорова  | maria@example.com | Минск | Беларусь |
    | 5  | Алексей    | Козлов    | alex@example.com | Москва | Россия |
    
    Таблица `orders`:
    
    | id | customer_id | order_date | total_amount | status |
    |----|-------------|------------|--------------|--------|
    | 1  | 1           | 2023-01-15 | 47000 | Доставлен |
    | 2  | 2           | 2023-01-16 | 25000 | В пути |
    | 3  | 3           | 2023-01-17 | 7000 | Отменён |
    | 4  | 1           | 2023-01-18 | 1000 | Доставлен |
    | 5  | 4           | 2023-01-18 | 5000 | Отменён |
    | 6  | 2           | 2023-01-19 | 12000 | Доставлен |
    | 7  | 3           | 2023-01-20 | 8000 | В пути |
    | 8  | 1           | 2023-01-21 | 30000 | Доставлен |
    
    ## Задание
    
    Создайте представление `customer_orders`, которое соединяет информацию о клиентах и их заказах.
    
    Представление должно включать следующие столбцы:
    - customer_id - ID клиента
    - customer_name - полное имя клиента (first_name + ' ' + last_name)
    - email - электронная почта клиента
    - country - страна клиента
    - order_count - количество заказов клиента
    - total_spent - общая сумма всех заказов клиента
    - avg_order_value - средняя сумма одного заказа
    
    Результат должен включать всех клиентов, даже тех, кто не сделал ни одного заказа, и быть отсортирован по убыванию общей суммы заказов.
  init_sql: |
    -- Создаём таблицу customers
    CREATE TABLE customers (
      id INTEGER PRIMARY KEY,
      first_name TEXT NOT NULL,
      last_name  TEXT NOT NULL,
      email      TEXT NOT NULL,
      city       TEXT NOT NULL,
      country    TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO customers (id, first_name, last_name, email, city, country) VALUES
      (1, 'Иван',   'Иванов',   'ivan@example.com', 'Москва',         'Россия'),
      (2, 'Анна',   'Петрова',  'anna@example.com', 'Санкт-Петербург', 'Россия'),
      (3, 'Джон',   'Смит',     'john@example.com', 'Нью-Йорк',       'США'),
      (4, 'Мария',  'Сидорова', 'maria@example.com', 'Минск',          'Беларусь'),
      (5, 'Алексей','Козлов',   'alex@example.com', 'Москва',         'Россия');
    
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён'),
      (6, 2, '2023-01-19', 12000, 'Доставлен'),
      (7, 3, '2023-01-20', 8000, 'В пути'),
      (8, 1, '2023-01-21', 30000, 'Доставлен');
  expected_sql: |
    CREATE VIEW customer_orders AS
    SELECT 
      c.id AS customer_id,
      c.first_name || ' ' || c.last_name AS customer_name,
      c.email,
      c.country,
      COUNT(o.id) AS order_count,
      COALESCE(SUM(o.total_amount), 0) AS total_spent,
      CASE 
        WHEN COUNT(o.id) > 0 THEN SUM(o.total_amount) / COUNT(o.id)
        ELSE 0
      END AS avg_order_value
    FROM customers c
    LEFT JOIN orders o ON c.id = o.customer_id
    GROUP BY c.id, c.first_name, c.last_name, c.email, c.country
    ORDER BY total_spent DESC;
  order: 2
  lesson_id: 12

- title: "Создание обновляемого представления"
  description_md: |
    # Создание обновляемого представления
    
    В этом упражнении вы научитесь создавать обновляемое представление с опцией WITH CHECK OPTION.
    
    ## База данных
    
    У вас есть таблица `employees` с информацией о сотрудниках:
    
    | id | first_name | last_name | email | department | salary | hire_date |
    |----|------------|-----------|-------|------------|--------|-----------|
    | 1  | Иван       | Иванов    | ivan@example.com | IT | 80000 | 2020-01-15 |
    | 2  | Анна       | Петрова   | anna@example.com | HR | 70000 | 2019-05-20 |
    | 3  | Алексей    | Смирнов   | alex@example.com | Sales | 90000 | 2021-02-10 |
    | 4  | Мария      | Сидорова  | maria@example.com | IT | 85000 | 2020-11-05 |
    | 5  | Дмитрий    | Козлов    | dmitry@example.com | Finance | 95000 | 2018-07-22 |
    
    ## Задание
    
    Создайте обновляемое представление `it_employees`, которое содержит только сотрудников IT-отдела с зарплатой выше 75000.
    
    Представление должно включать все столбцы из таблицы `employees` и использовать опцию WITH CHECK OPTION, чтобы предотвратить добавление или изменение сотрудников, которые не соответствуют условиям представления.
  init_sql: |
    -- Создаём таблицу employees
    CREATE TABLE employees (
      id INTEGER PRIMARY KEY,
      first_name TEXT NOT NULL,
      last_name TEXT NOT NULL,
      email TEXT NOT NULL,
      department TEXT NOT NULL,
      salary INTEGER NOT NULL,
      hire_date DATE NOT NULL
    );
    
    -- Вставляем тестовые данные
    INSERT INTO employees (id, first_name, last_name, email, department, salary, hire_date) VALUES
      (1, 'Иван', 'Иванов', 'ivan@example.com', 'IT', 80000, '2020-01-15'),
      (2, 'Анна', 'Петрова', 'anna@example.com', 'HR', 70000, '2019-05-20'),
      (3, 'Алексей', 'Смирнов', 'alex@example.com', 'Sales', 90000, '2021-02-10'),
      (4, 'Мария', 'Сидорова', 'maria@example.com', 'IT', 85000, '2020-11-05'),
      (5, 'Дмитрий', 'Козлов', 'dmitry@example.com', 'Finance', 95000, '2018-07-22');
  expected_sql: |
    CREATE VIEW it_employees AS
    SELECT *
    FROM employees
    WHERE department = 'IT' AND salary > 75000
    WITH CHECK OPTION;
  order: 3
  lesson_id: 12