- title: "Основы транзакций - BEGIN, COMMIT, ROLLBACK"
  description_md: |
    # Основы транзакций - BEGIN, COMMIT, ROLLBACK
    
    В этом упражнении вы научитесь использовать основные операторы управления транзакциями.
    
    ## База данных
    
    У вас есть таблица `accounts` с информацией о банковских счетах:
    
    | id | owner_name | balance |
    |----|------------|---------|
    | 1  | Иван Иванов | 10000   |
    | 2  | Анна Петрова | 5000    |
    | 3  | Алексей Сидоров | 15000   |
    
    ## Задание
    
    Напишите транзакцию, которая переводит 2000 рублей со счета Ивана Иванова на счет Анны Петровой.
    Транзакция должна:
    
    1. Начинаться с оператора BEGIN
    2. Уменьшить баланс на счете Ивана Иванова на 2000
    3. Увеличить баланс на счете Анны Петровой на 2000
    4. Завершиться оператором COMMIT
    
    Также добавьте проверку: если после списания баланс Ивана Иванова становится отрицательным, то транзакция должна быть отменена с помощью оператора ROLLBACK.
  init_sql: |
    -- Создаём таблицу accounts
    CREATE TABLE accounts (
      id INTEGER PRIMARY KEY,
      owner_name TEXT NOT NULL,
      balance INTEGER NOT NULL
    );
    
    -- Вставляем тестовые данные
    INSERT INTO accounts (id, owner_name, balance) VALUES
      (1, 'Иван Иванов', 10000),
      (2, 'Анна Петрова', 5000),
      (3, 'Алексей Сидоров', 15000);
  expected_sql: |
    BEGIN;
    
    -- Списываем средства со счета Ивана Иванова
    UPDATE accounts
    SET balance = balance - 2000
    WHERE id = 1;
    
    -- Проверяем, что баланс не стал отрицательным
    SELECT balance FROM accounts WHERE id = 1;
    -- В реальном запросе здесь была бы проверка условия
    -- Если баланс < 0, то необходимо выполнить ROLLBACK
    
    -- Пополняем счет Анны Петровой
    UPDATE accounts
    SET balance = balance + 2000
    WHERE id = 2;
    
    COMMIT;
  order: 1
  lesson_id: 11

- title: "Использование точек сохранения (SAVEPOINT)"
  description_md: |
    # Использование точек сохранения (SAVEPOINT)
    
    В этом упражнении вы научитесь использовать точки сохранения (SAVEPOINT) внутри транзакции.
    
    ## База данных
    
    У вас есть таблица `inventory` с информацией о товарах на складе:
    
    | id | product_name | quantity |
    |----|-------------|----------|
    | 1  | Ноутбук      | 10       |
    | 2  | Смартфон     | 20       |
    | 3  | Планшет      | 15       |
    | 4  | Наушники     | 30       |
    
    ## Задание
    
    Напишите транзакцию, которая обрабатывает заказ, состоящий из нескольких товаров:
    
    1. Начните транзакцию
    2. Уменьшите количество ноутбуков на 2 штуки
    3. Создайте точку сохранения "после_ноутбуков"
    4. Уменьшите количество смартфонов на 5 штук
    5. Создайте точку сохранения "после_смартфонов"
    6. Уменьшите количество наушников на 4 штуки
    7. Создайте точку сохранения "после_наушников"
    8. Уменьшите количество планшетов на 3 штуки
    9. Если количество любого товара стало отрицательным, откатитесь к последней точке сохранения
    10. Завершите транзакцию
  init_sql: |
    -- Создаём таблицу inventory
    CREATE TABLE inventory (
      id INTEGER PRIMARY KEY,
      product_name TEXT NOT NULL,
      quantity INTEGER NOT NULL
    );
    
    -- Вставляем тестовые данные
    INSERT INTO inventory (id, product_name, quantity) VALUES
      (1, 'Ноутбук', 10),
      (2, 'Смартфон', 20),
      (3, 'Планшет', 15),
      (4, 'Наушники', 30);
  expected_sql: |
    BEGIN;
    
    -- Уменьшаем количество ноутбуков
    UPDATE inventory
    SET quantity = quantity - 2
    WHERE product_name = 'Ноутбук';
    
    SAVEPOINT after_notebooks;
    
    -- Уменьшаем количество смартфонов
    UPDATE inventory
    SET quantity = quantity - 5
    WHERE product_name = 'Смартфон';
    
    SAVEPOINT after_smartphones;
    
    -- Уменьшаем количество наушников
    UPDATE inventory
    SET quantity = quantity - 4
    WHERE product_name = 'Наушники';
    
    SAVEPOINT after_headphones;
    
    -- Уменьшаем количество планшетов
    UPDATE inventory
    SET quantity = quantity - 3
    WHERE product_name = 'Планшет';
    
    -- Проверяем, не стало ли количество каких-либо товаров отрицательным
    -- В реальном запросе здесь была бы проверка условия
    -- Если quantity < 0 для любого товара, то:
    -- ROLLBACK TO after_headphones;
    
    COMMIT;
  order: 2
  lesson_id: 11

- title: "Уровни изоляции транзакций"
  description_md: |
    # Уровни изоляции транзакций
    
    В этом упражнении вы научитесь устанавливать уровни изоляции транзакций.
    
    ## Задание
    
    Напишите SQL-запросы для выполнения следующих действий:
    
    1. Установить уровень изоляции транзакций READ COMMITTED для текущей сессии
    2. Начать новую транзакцию
    3. Выполнить запрос, который выбирает всех клиентов из России
    4. Установить уровень изоляции SERIALIZABLE для следующей транзакции
    5. Зафиксировать текущую транзакцию
    6. Начать новую транзакцию с уровнем изоляции SERIALIZABLE
    7. Выполнить запрос, который выбирает заказы клиента с ID=1, сделанные после 2023-01-01
    8. Зафиксировать вторую транзакцию
  init_sql: |
    -- Для этого упражнения не требуется начальный SQL-код
  expected_sql: |
    -- Устанавливаем уровень изоляции READ COMMITTED для сессии
    SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
    
    -- Начинаем первую транзакцию
    BEGIN;
    
    -- Выполняем запрос
    SELECT * FROM customers WHERE country = 'Россия';
    
    -- Устанавливаем уровень изоляции SERIALIZABLE для следующей транзакции
    SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
    
    -- Фиксируем первую транзакцию
    COMMIT;
    
    -- Начинаем вторую транзакцию с уровнем изоляции SERIALIZABLE
    BEGIN;
    
    -- Выполняем запрос
    SELECT * FROM orders 
    WHERE customer_id = 1 AND order_date > '2023-01-01';
    
    -- Фиксируем вторую транзакцию
    COMMIT;
  order: 3
  lesson_id: 11