- title: "Внутреннее соединение (INNER JOIN)"
  description_md: |
    # Внутреннее соединение (INNER JOIN)
    
    В этом упражнении вы научитесь использовать INNER JOIN для соединения данных из двух таблиц.
    
    ## База данных
    
    Вы работаете с базой данных интернет-магазина. У вас есть таблица `orders` с информацией о заказах:
    
    | id | customer_id | order_date | total_amount | status |
    |----|-------------|------------|--------------|--------|
    | 1  | 1           | 2023-01-15 | 47000 | Доставлен |
    | 2  | 2           | 2023-01-16 | 25000 | В пути |
    | 3  | 3           | 2023-01-17 | 7000 | Отменён |
    | 4  | 1           | 2023-01-18 | 1000 | Доставлен |
    | 5  | 4           | 2023-01-18 | 5000 | Отменён |
    
    И таблица `customers` с информацией о клиентах:
    
    | id | first_name | last_name | email | city | country |
    |----|------------|-----------|-------|------|---------|
    | 1  | Иван       | Иванов    | ivan@example.com | Москва | Россия |
    | 2  | Анна       | Петрова   | anna@example.com | Санкт-Петербург | Россия |
    | 3  | Джон       | Смит      | john@example.com | Нью-Йорк | США |
    | 4  | Мария      | Сидорова  | maria@example.com | Минск | Беларусь |
    | 5  | Алексей    | Козлов    | alex@example.com | Москва | Россия |
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт информацию о всех заказах с указанием имени и фамилии клиента, сделавшего заказ.
    
    Результат должен содержать следующие столбцы:
    - `order_id` - идентификатор заказа
    - `order_date` - дата заказа
    - `customer_name` - имя и фамилия клиента (объединенные через пробел)
    - `total_amount` - сумма заказа
    - `status` - статус заказа
    
    Результат должен быть отсортирован по возрастанию даты заказа.
  init_sql: |
    -- Создаём таблицу customers
    CREATE TABLE customers (
      id INTEGER PRIMARY KEY,
      first_name TEXT NOT NULL,
      last_name  TEXT NOT NULL,
      email      TEXT NOT NULL,
      city       TEXT NOT NULL,
      country    TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO customers (id, first_name, last_name, email, city, country) VALUES
      (1, 'Иван',   'Иванов',   'ivan@example.com', 'Москва',         'Россия'),
      (2, 'Анна',   'Петрова',  'anna@example.com', 'Санкт-Петербург', 'Россия'),
      (3, 'Джон',   'Смит',     'john@example.com', 'Нью-Йорк',       'США'),
      (4, 'Мария',  'Сидорова', 'maria@example.com', 'Минск',          'Беларусь'),
      (5, 'Алексей','Козлов',   'alex@example.com', 'Москва',         'Россия');
    
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён');
  expected_sql: |
    SELECT
      o.id AS order_id,
      o.order_date,
      c.first_name || ' ' || c.last_name AS customer_name,
      o.total_amount,
      o.status
    FROM orders o
    INNER JOIN customers c ON o.customer_id = c.id
    ORDER BY o.order_date;
  order: 1
  lesson_id: 6

- title: "Левое соединение (LEFT JOIN)"
  description_md: |
    # Левое соединение (LEFT JOIN)
    
    В этом упражнении вы научитесь использовать LEFT JOIN для соединения данных из двух таблиц, включая строки из левой таблицы, для которых нет соответствия в правой таблице.
    
    ## База данных
    
    Вы работаете с той же базой данных интернет-магазина. У вас есть таблицы `customers` и `orders` (см. предыдущее упражнение).
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт список всех клиентов и информацию об их заказах. В списке должны быть все клиенты, даже те, которые не сделали ни одного заказа.
    
    Результат должен содержать следующие столбцы:
    - `customer_id` - идентификатор клиента
    - `customer_name` - имя и фамилия клиента (объединенные через пробел)
    - `order_count` - количество заказов клиента
    - `total_spent` - общая сумма всех заказов клиента
    
    Результат должен быть отсортирован по убыванию общей суммы заказов, затем по алфавиту имени клиента.
  init_sql: |
    -- Создаём таблицу customers
    CREATE TABLE customers (
      id INTEGER PRIMARY KEY,
      first_name TEXT NOT NULL,
      last_name  TEXT NOT NULL,
      email      TEXT NOT NULL,
      city       TEXT NOT NULL,
      country    TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO customers (id, first_name, last_name, email, city, country) VALUES
      (1, 'Иван',   'Иванов',   'ivan@example.com', 'Москва',         'Россия'),
      (2, 'Анна',   'Петрова',  'anna@example.com', 'Санкт-Петербург', 'Россия'),
      (3, 'Джон',   'Смит',     'john@example.com', 'Нью-Йорк',       'США'),
      (4, 'Мария',  'Сидорова', 'maria@example.com', 'Минск',          'Беларусь'),
      (5, 'Алексей','Козлов',   'alex@example.com', 'Москва',         'Россия');
    
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён');
  expected_sql: |
    SELECT
      c.id AS customer_id,
      c.first_name || ' ' || c.last_name AS customer_name,
      COUNT(o.id) AS order_count,
      COALESCE(SUM(o.total_amount), 0) AS total_spent
    FROM customers c
    LEFT JOIN orders o ON c.id = o.customer_id
    GROUP BY c.id, c.first_name, c.last_name
    ORDER BY total_spent DESC, customer_name;
  order: 2
  lesson_id: 6

- title: "Соединение нескольких таблиц"
  description_md: |
    # Соединение нескольких таблиц
    
    В этом упражнении вы научитесь соединять данные из трех таблиц, используя несколько JOIN-операторов.
    
    ## База данных
    
    Вы работаете с базой данных интернет-магазина. Кроме таблиц `customers` и `orders`, у вас есть таблица `order_items`, содержащая информацию о товарах в каждом заказе:
    
    | id | order_id | product_id | quantity | price |
    |----|----------|------------|----------|-------|
    | 1  | 1        | 1          | 1        | 45000 |
    | 2  | 1        | 5          | 2        | 1000 |
    | 3  | 2        | 2          | 1        | 25000 |
    | 4  | 3        | 3          | 1        | 2000 |
    | 5  | 3        | 4          | 1        | 5000 |
    | 6  | 4        | 5          | 1        | 1000 |
    | 7  | 5        | 4          | 1        | 5000 |
    
    И таблица `products` с информацией о товарах:
    
    | id | name | description | price | category |
    |----|------|-------------|-------|----------|
    | 1  | Ноутбук ASUS | Ноутбук для работы и развлечений | 45000 | Электроника |
    | 2  | Смартфон Samsung | Смартфон с хорошей камерой | 25000 | Электроника |
    | 3  | Футболка Nike | Спортивная футболка | 2000 | Одежда |
    | 4  | Кроссовки Adidas | Спортивная обувь | 5000 | Обувь |
    | 5  | Книга "SQL для начинающих" | Учебник по SQL | 1000 | Книги |
    
    ## Задание
    
    Напишите SQL-запрос, который вернёт детализированную информацию о заказах: для каждого товара в каждом заказе укажите информацию о заказе, клиенте и самом товаре.
    
    Результат должен содержать следующие столбцы:
    - `order_id` - идентификатор заказа
    - `order_date` - дата заказа
    - `customer_name` - имя и фамилия клиента
    - `product_name` - название товара
    - `category` - категория товара
    - `quantity` - количество товара в заказе
    - `item_price` - цена за единицу товара
    - `item_total` - общая стоимость товара в заказе (количество * цена)
    
    Результат должен быть отсортирован сначала по дате заказа (по возрастанию), затем по идентификатору заказа и названию товара.
  init_sql: |
    -- Создаём таблицу customers
    CREATE TABLE customers (
      id INTEGER PRIMARY KEY,
      first_name TEXT NOT NULL,
      last_name  TEXT NOT NULL,
      email      TEXT NOT NULL,
      city       TEXT NOT NULL,
      country    TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO customers (id, first_name, last_name, email, city, country) VALUES
      (1, 'Иван',   'Иванов',   'ivan@example.com', 'Москва',         'Россия'),
      (2, 'Анна',   'Петрова',  'anna@example.com', 'Санкт-Петербург', 'Россия'),
      (3, 'Джон',   'Смит',     'john@example.com', 'Нью-Йорк',       'США'),
      (4, 'Мария',  'Сидорова', 'maria@example.com', 'Минск',          'Беларусь'),
      (5, 'Алексей','Козлов',   'alex@example.com', 'Москва',         'Россия');
    
    -- Создаём таблицу orders
    CREATE TABLE orders (
      id INTEGER PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      order_date DATE NOT NULL,
      total_amount INTEGER NOT NULL,
      status TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO orders (id, customer_id, order_date, total_amount, status) VALUES
      (1, 1, '2023-01-15', 47000, 'Доставлен'),
      (2, 2, '2023-01-16', 25000, 'В пути'),
      (3, 3, '2023-01-17', 7000, 'Отменён'),
      (4, 1, '2023-01-18', 1000, 'Доставлен'),
      (5, 4, '2023-01-18', 5000, 'Отменён');
    
    -- Создаём таблицу products
    CREATE TABLE products (
      id INTEGER PRIMARY KEY,
      name TEXT NOT NULL,
      description TEXT NOT NULL,
      price INTEGER NOT NULL,
      category TEXT NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO products (id, name, description, price, category) VALUES
      (1, 'Ноутбук ASUS', 'Ноутбук для работы и развлечений', 45000, 'Электроника'),
      (2, 'Смартфон Samsung', 'Смартфон с хорошей камерой', 25000, 'Электроника'),
      (3, 'Футболка Nike', 'Спортивная футболка', 2000, 'Одежда'),
      (4, 'Кроссовки Adidas', 'Спортивная обувь', 5000, 'Обувь'),
      (5, 'Книга "SQL для начинающих"', 'Учебник по SQL', 1000, 'Книги');
    
    -- Создаём таблицу order_items
    CREATE TABLE order_items (
      id INTEGER PRIMARY KEY,
      order_id INTEGER NOT NULL,
      product_id INTEGER NOT NULL,
      quantity INTEGER NOT NULL,
      price INTEGER NOT NULL
    );
    -- Вставляем тестовые данные
    INSERT INTO order_items (id, order_id, product_id, quantity, price) VALUES
      (1, 1, 1, 1, 45000),
      (2, 1, 5, 2, 1000),
      (3, 2, 2, 1, 25000),
      (4, 3, 3, 1, 2000),
      (5, 3, 4, 1, 5000),
      (6, 4, 5, 1, 1000),
      (7, 5, 4, 1, 5000);
  expected_sql: |
    SELECT
      o.id AS order_id,
      o.order_date,
      c.first_name || ' ' || c.last_name AS customer_name,
      p.name AS product_name,
      p.category,
      oi.price AS item_price,
      oi.quantity * oi.price AS item_total
    FROM orders o
    INNER JOIN customers c ON o.customer_id = c.id
    INNER JOIN order_items oi ON o.id = oi.order_id
    INNER JOIN products p ON oi.product_id = p.id
    ORDER BY o.order_date, o.id, p.name;
  order: 3
  lesson_id: 6